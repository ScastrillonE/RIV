{
 "Resources": {
  "rekognitionfaceassets5303E42F": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "rekognition-face-assets"
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "RIVPStack/rekognition-face-assets/Resource"
   }
  },
  "rekognitionfaceassetsNotificationsF1190AAF": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "rekognitionfaceassets5303E42F"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".zip"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "processidentityverificationlambda3E170D35",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "rekognitionfaceassetsAllowBucketNotificationsToRIVPStackprocessidentityverificationlambdaEC5456B610040DEB"
   ],
   "Metadata": {
    "aws:cdk:path": "RIVPStack/rekognition-face-assets/Notifications/Resource"
   }
  },
  "rekognitionfaceassetsAllowBucketNotificationsToRIVPStackprocessidentityverificationlambdaEC5456B610040DEB": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "processidentityverificationlambda3E170D35",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::GetAtt": [
      "rekognitionfaceassets5303E42F",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RIVPStack/rekognition-face-assets/AllowBucketNotificationsToRIVPStackprocessidentityverificationlambdaEC5456B6"
   }
  },
  "LambdaReadS37DB07EFF": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AdministratorAccess"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RIVPStack/LambdaReadS3/Resource"
   }
  },
  "LambdaReadS3DefaultPolicy9E5D7EF4": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "dynamodb:*",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "IdentityVerificationResultsTable95FE563F",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LambdaReadS3DefaultPolicy9E5D7EF4",
    "Roles": [
     {
      "Ref": "LambdaReadS37DB07EFF"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RIVPStack/LambdaReadS3/DefaultPolicy/Resource"
   }
  },
  "processidentityverificationlambda3E170D35": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "331f38b1a877d324e886c27fc5465e23826d580b3dd25b23dd92ae3b3a1cfaac.zip"
    },
    "Handler": "process-identity-verification.handler",
    "Role": {
     "Fn::GetAtt": [
      "LambdaReadS37DB07EFF",
      "Arn"
     ]
    },
    "Runtime": "python3.8",
    "Timeout": 180
   },
   "DependsOn": [
    "LambdaReadS3DefaultPolicy9E5D7EF4",
    "LambdaReadS37DB07EFF"
   ],
   "Metadata": {
    "aws:cdk:path": "RIVPStack/process-identity-verification-lambda/Resource",
    "aws:asset:path": "asset.331f38b1a877d324e886c27fc5465e23826d580b3dd25b23dd92ae3b3a1cfaac",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "uploads3lambda1A0E162A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "1b826c22c76c9ae30382aa7005732b595223be45b4b000f14816329ffac6233a.zip"
    },
    "Handler": "uploads3.handler",
    "Role": {
     "Fn::GetAtt": [
      "LambdaReadS37DB07EFF",
      "Arn"
     ]
    },
    "Runtime": "python3.8",
    "Timeout": 180
   },
   "DependsOn": [
    "LambdaReadS3DefaultPolicy9E5D7EF4",
    "LambdaReadS37DB07EFF"
   ],
   "Metadata": {
    "aws:cdk:path": "RIVPStack/upload-s3-lambda/Resource",
    "aws:asset:path": "asset.1b826c22c76c9ae30382aa7005732b595223be45b4b000f14816329ffac6233a",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "getinfodentityverificationlambda27689469": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "c0e6367e0cf0a6e86f582104f73604bffd8a17d03e2846dd470c2a15cd36256c.zip"
    },
    "Handler": "get-info-dentity-verification.handler",
    "Role": {
     "Fn::GetAtt": [
      "LambdaReadS37DB07EFF",
      "Arn"
     ]
    },
    "Runtime": "python3.8",
    "Timeout": 180
   },
   "DependsOn": [
    "LambdaReadS3DefaultPolicy9E5D7EF4",
    "LambdaReadS37DB07EFF"
   ],
   "Metadata": {
    "aws:cdk:path": "RIVPStack/get-info-dentity-verification-lambda/Resource",
    "aws:asset:path": "asset.c0e6367e0cf0a6e86f582104f73604bffd8a17d03e2846dd470c2a15cd36256c",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RIVPStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RIVPStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    bucket = props[\"BucketName\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    request_type = event[\"RequestType\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n\n    if managed:\n      config = handle_managed(request_type, notification_configuration)\n    else:\n      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n    put_bucket_notification_configuration(bucket, config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return external_notifications\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "RIVPStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "FileUploadApiAF719C21": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Name": "FileUploadApi"
   },
   "Metadata": {
    "aws:cdk:path": "RIVPStack/FileUploadApi/Resource"
   }
  },
  "FileUploadApiDeployment1DF15B335c9bc53437210a75afcdd48d522041a3": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "Automatically created by the RestApi construct",
    "RestApiId": {
     "Ref": "FileUploadApiAF719C21"
    }
   },
   "DependsOn": [
    "FileUploadApigetIdentitySimilarityGETAB1A602D",
    "FileUploadApigetIdentitySimilarity04C64BBC",
    "FileUploadApiuploadPOSTA4822FF3",
    "FileUploadApiupload5680723D"
   ],
   "Metadata": {
    "aws:cdk:path": "RIVPStack/FileUploadApi/Deployment/Resource"
   }
  },
  "FileUploadApiDeploymentStageprodBBFEA435": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "DeploymentId": {
     "Ref": "FileUploadApiDeployment1DF15B335c9bc53437210a75afcdd48d522041a3"
    },
    "RestApiId": {
     "Ref": "FileUploadApiAF719C21"
    },
    "StageName": "prod"
   },
   "Metadata": {
    "aws:cdk:path": "RIVPStack/FileUploadApi/DeploymentStage.prod/Resource"
   }
  },
  "FileUploadApiupload5680723D": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "FileUploadApiAF719C21",
      "RootResourceId"
     ]
    },
    "PathPart": "upload",
    "RestApiId": {
     "Ref": "FileUploadApiAF719C21"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RIVPStack/FileUploadApi/Default/upload/Resource"
   }
  },
  "FileUploadApiuploadPOSTApiPermissionRIVPStackFileUploadApi65EBE329POSTupload1034DBD0": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "uploads3lambda1A0E162A",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "FileUploadApiAF719C21"
       },
       "/",
       {
        "Ref": "FileUploadApiDeploymentStageprodBBFEA435"
       },
       "/POST/upload"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RIVPStack/FileUploadApi/Default/upload/POST/ApiPermission.RIVPStackFileUploadApi65EBE329.POST..upload"
   }
  },
  "FileUploadApiuploadPOSTApiPermissionTestRIVPStackFileUploadApi65EBE329POSTuploadBBF0DDA1": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "uploads3lambda1A0E162A",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "FileUploadApiAF719C21"
       },
       "/test-invoke-stage/POST/upload"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RIVPStack/FileUploadApi/Default/upload/POST/ApiPermission.Test.RIVPStackFileUploadApi65EBE329.POST..upload"
   }
  },
  "FileUploadApiuploadPOSTA4822FF3": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": true,
    "AuthorizationType": "NONE",
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "uploads3lambda1A0E162A",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "FileUploadApiupload5680723D"
    },
    "RestApiId": {
     "Ref": "FileUploadApiAF719C21"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RIVPStack/FileUploadApi/Default/upload/POST/Resource"
   }
  },
  "FileUploadApigetIdentitySimilarity04C64BBC": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "FileUploadApiAF719C21",
      "RootResourceId"
     ]
    },
    "PathPart": "getIdentitySimilarity",
    "RestApiId": {
     "Ref": "FileUploadApiAF719C21"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RIVPStack/FileUploadApi/Default/getIdentitySimilarity/Resource"
   }
  },
  "FileUploadApigetIdentitySimilarityGETApiPermissionRIVPStackFileUploadApi65EBE329GETgetIdentitySimilarityB7DE8C91": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "getinfodentityverificationlambda27689469",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "FileUploadApiAF719C21"
       },
       "/",
       {
        "Ref": "FileUploadApiDeploymentStageprodBBFEA435"
       },
       "/GET/getIdentitySimilarity"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RIVPStack/FileUploadApi/Default/getIdentitySimilarity/GET/ApiPermission.RIVPStackFileUploadApi65EBE329.GET..getIdentitySimilarity"
   }
  },
  "FileUploadApigetIdentitySimilarityGETApiPermissionTestRIVPStackFileUploadApi65EBE329GETgetIdentitySimilarity63D560ED": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "getinfodentityverificationlambda27689469",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "FileUploadApiAF719C21"
       },
       "/test-invoke-stage/GET/getIdentitySimilarity"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RIVPStack/FileUploadApi/Default/getIdentitySimilarity/GET/ApiPermission.Test.RIVPStackFileUploadApi65EBE329.GET..getIdentitySimilarity"
   }
  },
  "FileUploadApigetIdentitySimilarityGETAB1A602D": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": true,
    "AuthorizationType": "NONE",
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "getinfodentityverificationlambda27689469",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "FileUploadApigetIdentitySimilarity04C64BBC"
    },
    "RestApiId": {
     "Ref": "FileUploadApiAF719C21"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RIVPStack/FileUploadApi/Default/getIdentitySimilarity/GET/Resource"
   }
  },
  "IdentityVerificationResultsTable95FE563F": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "RequestId",
      "AttributeType": "S"
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "RequestId",
      "KeyType": "HASH"
     }
    ],
    "ProvisionedThroughput": {
     "ReadCapacityUnits": 5,
     "WriteCapacityUnits": 5
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "RIVPStack/IdentityVerificationResultsTable/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/1WQy07DMBBFv6V7x5Rk021bxA4Rle6riT2EIbEdxbaqKPK/40eoYDVnrudxPTV/3td8v4O7rYQcqpE6vn44EAOL0m21DV9PXgzo2PlTb1TCCSwGNoLqJPA1vrY4K7KWjGavXguXIMq/HBiB4uvFjJjkHFszklhSWigw29zAWnSWH1NgMFEPDu+wxFa07jhR7t7wBafRLAp19vcni3/o854Csd74WWAy/Ui2QYXf0H0ZmaRCgclFgzIyHuQKXTGdIYR/jQ/IhtM60n2qePdu8tnX2WhJ5QbtEofrp4YfeL37tkTV7LUjhfxS4g8wejGpkgEAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "RIVPStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "FileUploadApiEndpoint576839AA": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "FileUploadApiAF719C21"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "FileUploadApiDeploymentStageprodBBFEA435"
      },
      "/"
     ]
    ]
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}